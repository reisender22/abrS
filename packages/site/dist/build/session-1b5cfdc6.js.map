{"version":3,"file":"session-1b5cfdc6.js","sources":["../../src/stores/session.js"],"sourcesContent":["import { client, gql } from \"../utils/client\";\nimport { notifications } from \"./quickNotifications\";\nimport createStatusStore from \"../utils/createStatusStore\";\n\nconst status = createStatusStore();\n\nstatus.set(\"LOGGED_OUT\");\n\nfunction createSessionStore() {\n  let session = {};\n  let subs = [];\n\n  const mutations = {\n    REQUEST_PASSWORD_RESET: gql`\n      mutation RequestPasswordReset($email: String!) {\n        requestPasswordReset(email: $email)\n      }\n    `,\n\n    RESET_PASSWORD: gql`\n      mutation ResetPassword($token: String!) {\n        resetPassword(token: $token)\n      }\n    `,\n  };\n\n  function subscribe(handler) {\n    subs.push(handler);\n    handler(session);\n\n    return function unsubscribe() {\n      subs = subs.filter((fn) => fn !== handler);\n    };\n  }\n\n  function set(value) {\n    session = value;\n    for (const fn of subs) fn(session);\n  }\n\n  async function login(email, password) {\n    status.set(\"AUTHENTICATING\");\n\n  const url = \"https://api-kurse.miftahul-ilm.net/auth/login\";\n  // const url = \"http://localhost:3000/auth/login\";\n\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password }),\n    };\n\n    const response = await fetch(url, options);\n\n    if (response.ok) {\n      const { user, notifications } = await response.json();\n\n      set({ ...session, user, notifications });\n\n      status.set(\"AUTHENTICATED\");\n    } else {\n      const { message } = await response.json();\n\n      notifications.display({ message: \"Fehler: \" + message, level: \"error\" });\n\n      status.set(\"ERROR\");\n    }\n  }\n\n  async function logout() {\n    set({ ...session, user: null });\n    status.reset();\n  }\n\n  async function dismissNotification(id) {\n    if (session.notifications.find((n) => n.id == id).is_dismissed) return;\n\n    status.set(\"DISMISSING_NOTIFICATION\");\n\n    const url =\"https://api-kurse.miftahul-ilm.net/auth/notifications/${id}/dismiss\";\n    // const url = `http://localhost:3000/auth/notifications/${id}/dismiss`;\n    const options = { method: \"PUT\" };\n    const response = await fetch(url, options);\n\n    if (response.ok) {\n      session.notifications.find((n) => n.id == id).is_dismissed = true;\n\n      set(session);\n\n      status.set(\"DISMISSED_NOTIFICATION\");\n    } else {\n      const { message } = await response.json();\n\n      notifications.display({ message: \"Fehler: \" + message, level: \"error\" });\n\n      status.set(\"ERROR\");\n    }\n  }\n\n  async function requestPasswordReset(email) {\n    status.set(\"REQUESTING_PASSWORD_RESET\");\n\n    const { data, errors } = await client.request(\n      mutations.REQUEST_PASSWORD_RESET,\n      {\n        email,\n      }\n    );\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      status.set(\"REQUESTED_PASSWORD_RESET\");\n      notifications.display({ message: \"Eine Email wurde Dir zugesendet.\" });\n    }\n  }\n\n  async function resetPassword(token) {\n    status.set(\"RESETTING_PASSWORD\");\n\n    const { data, errors } = await client.request(mutations.RESET_PASSWORD, {\n      token,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      status.set(\"RESETTED_PASSWORD\");\n      notifications.display({ message: \"Passwort wurde zur√ºcksetzen\" });\n\n      return data.resetPassword;\n    }\n  }\n\n  return {\n    subscribe,\n    login,\n    logout,\n    dismissNotification,\n    requestPasswordReset,\n    resetPassword,\n  };\n}\n\nconst session = createSessionStore();\n\nexport { session, status };\n"],"names":["status","createStatusStore","set","session","subs","mutations","REQUEST_PASSWORD_RESET","gql","RESET_PASSWORD","value","fn","subscribe","handler","push","filter","login","async","email","password","options","method","headers","Content-Type","body","JSON","stringify","response","fetch","ok","user","notifications","json","message","display","level","logout","reset","dismissNotification","id","find","n","is_dismissed","requestPasswordReset","data","errors","client","request","resetPassword","token","createSessionStore"],"mappings":"yJAIK,MAACA,EAASC,IAEfD,EAAOE,IAAI,cAoJN,MAACC,EAlJN,WACE,IAAIA,EAAU,GACVC,EAAO,GAEX,MAAMC,EAAY,CAChBC,uBAAwBC,CAAG;;;;MAM3BC,eAAgBD,CAAG;;;;OAgBrB,SAASL,EAAIO,GACXN,EAAUM,EACV,IAAK,MAAMC,KAAMN,EAAMM,EAAGP,GA2G5B,MAAO,CACLQ,UAvHF,SAAmBC,GAIjB,OAHAR,EAAKS,KAAKD,GACVA,EAAQT,GAED,WACLC,EAAOA,EAAKU,OAAQJ,GAAOA,IAAOE,KAmHpCG,MA1GFC,eAAqBC,EAAOC,GAC1BlB,EAAOE,IAAI,kBAEb,MAGQiB,EAAU,CACdC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAER,MAAAA,EAAOC,SAAAA,KAG1BQ,QAAiBC,MATb,gDASwBR,GAElC,GAAIO,EAASE,GAAI,CACf,MAAMC,KAAEA,EAAIC,cAAEA,SAAwBJ,EAASK,OAE/C7B,EAAI,IAAKC,EAAS0B,KAAAA,EAAMC,cAAAA,IAExB9B,EAAOE,IAAI,qBACN,CACL,MAAM8B,QAAEA,SAAkBN,EAASK,OAEnCD,EAAcG,QAAQ,CAAED,QAAS,WAAaA,EAASE,MAAO,UAE9DlC,EAAOE,IAAI,WAkFbiC,OA9EFnB,iBACEd,EAAI,IAAKC,EAAS0B,KAAM,OACxB7B,EAAOoC,SA6EPC,oBA1EFrB,eAAmCsB,GACjC,GAAInC,EAAQ2B,cAAcS,KAAMC,GAAMA,EAAEF,IAAMA,GAAIG,aAAc,OAEhEzC,EAAOE,IAAI,2BAEX,MAGMwB,QAAiBC,MAHZ,sEAEK,CAAEP,OAAQ,QAG1B,GAAIM,EAASE,GACXzB,EAAQ2B,cAAcS,KAAMC,GAAMA,EAAEF,IAAMA,GAAIG,cAAe,EAE7DvC,EAAIC,GAEJH,EAAOE,IAAI,8BACN,CACL,MAAM8B,QAAEA,SAAkBN,EAASK,OAEnCD,EAAcG,QAAQ,CAAED,QAAS,WAAaA,EAASE,MAAO,UAE9DlC,EAAOE,IAAI,WAsDbwC,qBAlDF1B,eAAoCC,GAClCjB,EAAOE,IAAI,6BAEX,MAAMyC,KAAEA,EAAIC,OAAEA,SAAiBC,EAAOC,QACpCzC,EAAUC,uBACV,CACEW,MAAAA,IAIA2B,GACF5C,EAAOE,IAAI,SAEX4B,EAAcG,QAAQ,CACpBD,QAAS,WAAaY,EAAO,GAAGZ,QAChCE,MAAO,YAGTlC,EAAOE,IAAI,4BACX4B,EAAcG,QAAQ,CAAED,QAAS,uCAgCnCe,cA5BF/B,eAA6BgC,GAC3BhD,EAAOE,IAAI,sBAEX,MAAMyC,KAAEA,EAAIC,OAAEA,SAAiBC,EAAOC,QAAQzC,EAAUG,eAAgB,CACtEwC,MAAAA,IAGF,IAAIJ,EAWF,OAHA5C,EAAOE,IAAI,qBACX4B,EAAcG,QAAQ,CAAED,QAAS,gCAE1BW,EAAKI,cAVZ/C,EAAOE,IAAI,SAEX4B,EAAcG,QAAQ,CACpBD,QAAS,WAAaY,EAAO,GAAGZ,QAChCE,MAAO,YAoBCe"}