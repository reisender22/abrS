{"version":3,"file":"class-1bdaf5f9.js","sources":["../../src/stores/class.js"],"sourcesContent":["import { client, gql } from \"../utils/client\";\nimport { notifications } from \"./quickNotifications\";\nimport createStatusStore from \"../utils/createStatusStore\";\n\nconst fragments = {\n  ALL_FIELDS: gql`\n    id\n    subject\n    level\n    times {\n      day\n      from\n      to\n    }\n    name\n    gender\n    description_md\n    registration_fee\n    registration_fee_offer\n    price_per_hour\n    hours_per_lesson\n    invoice_cycle\n    teacher {\n      id\n      first_name\n      last_name\n    }\n    state\n    notes\n    hoursUntilNextInvoice\n    last_invoice_at\n    enrollments {\n      id\n      custom_price_per_hour\n      student {\n        id\n        email\n        phone_number\n        gender\n        first_name\n        last_name\n        address_line_1\n        address_line_2\n        postal_code\n        locality\n        country\n        is_registration_fee_paid\n        invoices(state: OPEN) {\n          id\n        }\n      }\n      stats {\n        attendance {\n          present\n          absent\n          excused\n          passive\n        }\n        homeworks {\n          done\n          notDone\n        }\n      }\n      notes\n    }\n    lessons {\n      id\n      date_from\n      date_to\n      title\n      homeworks_md\n      notes_md\n      updated_at\n      created_at\n    }\n    updated_at\n    created_at`,\n\n  ALL_LESSON_FIELDS: gql`\n    id\n    date_from\n    date_to\n    title\n    notes_md\n    homeworks_md\n    updated_at\n    created_at`,\n};\n\nconst queries = {\n  GET_BY_ID: gql`\n    query GetClassById($id: ID!) {\n      getClass(id: $id) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n\n  CREATE: gql`\n    mutation CreateNewClass($classInput: ClassInput!) {\n      createClass(classInput: $classInput) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n\n  UPDATE: gql`\n    mutation UpdateClass($id: ID!, $classInput: ClassInput!) {\n      updateClass(id: $id, classInput: $classInput) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n\n  CREATE_FIRST_INVOICES: gql`\n    mutation CreateFirstInvoices($id: ID!) {\n      createFirstInvoices(id: $id) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n\n  DELETE: gql`\n    mutation DeleteClass($id: ID!) {\n      deleteClass(id: $id)\n    }\n  `,\n\n  CREATE_LESSON: gql`\n    mutation CreateNewLesson($lessonInput: LessonInput!, $sessionInputs: [SessionInput!]!) {\n      createLesson(lessonInput: $lessonInput, sessionInputs: $sessionInputs) {\n        ${fragments.ALL_LESSON_FIELDS}\n      }\n    }`,\n\n  UPDATE_LESSON: gql`\n    mutation UpdateLesson($id: ID!, $lessonInput: LessonInput!) {\n      updateLesson(id: $id, lessonInput: $lessonInput) {\n        ${fragments.ALL_LESSON_FIELDS}\n      }\n    }`,\n\n  CREATE_ENROLLMENT: gql`\n    mutation EnrollStudentIntoClass($student_id: ID!, $class_id: ID!) {\n      createEnrollment(student_id: $student_id, class_id: $class_id) {\n        id\n        custom_price_per_hour\n        student {\n          id\n          email\n          first_name\n          last_name\n          address_line_1\n          address_line_2\n          postal_code\n          locality\n          country\n          is_registration_fee_paid\n          invoices(state: OPEN) {\n            id\n          }\n        }\n        stats {\n          attendance {\n            present\n            absent\n            excused\n            passive\n          }\n          homeworks {\n            done\n            notDone\n          }\n        }\n        notes\n      }\n    }\n  `,\n\n  UPDATE_ENROLLMENT: gql`\n    mutation UpdateEnrollment($id: ID!, $custom_price_per_hour: Int!) {\n      updateEnrollment(id: $id, custom_price_per_hour: $custom_price_per_hour) {\n        id\n        custom_price_per_hour\n        student {\n          id\n          email\n          first_name\n          last_name\n          address_line_1\n          address_line_2\n          postal_code\n          locality\n          country\n          is_registration_fee_paid\n          invoices(state: OPEN) {\n            id\n          }\n        }\n        stats {\n          attendance {\n            present\n            absent\n            excused\n            passive\n          }\n          homeworks {\n            done\n            notDone\n          }\n        }\n        notes\n      }\n    }\n  `,\n\n  DEL_ENROLLMENT: gql`\n    mutation DeleteEnrollment($id: ID!) {\n      delEnrollment(id: $id)\n    }\n  `,\n\n  REQUEST_CLASS_CHANGE: gql`\n    mutation RequestClassChange($student_id: ID!, $currentClassId: ID!, $newClassId: ID!) {\n      requestClassChange(student_id: $student_id, currentClassId: $currentClassId, newClassId: $newClassId) {\n        student_id\n        items {\n          description\n          price\n          quantity\n          class_id\n        }\n      }\n    }\n  `,\n};\n\nconst status = createStatusStore();\n\nfunction createClassStore() {\n  let clss;\n  let subs = [];\n\n  function subscribe(handler) {\n    subs.push(handler);\n    handler(clss);\n\n    return function unsubscribe() {\n      subs = subs.filter((fn) => fn !== handler);\n    };\n  }\n\n  function set(value) {\n    clss = value;\n    for (const fn of subs) fn(clss);\n  }\n\n  async function create(classInput) {\n    status.set(\"CREATING\");\n\n    const { data, errors } = await client.request(queries.CREATE, {\n      classInput,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      data.createClass.teacher_id = data.createClass.teacher.id;\n      set(data.createClass);\n\n      status.set(\"CREATED\");\n      notifications.display({ message: \"Klasse wurde erstellt\" });\n    }\n  }\n\n  async function fetch(id) {\n    status.set(\"FETCHING\");\n\n    const { data, errors } = await client.request(queries.GET_BY_ID, { id });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      data.getClass.teacher_id = data.getClass.teacher.id;\n      set(data.getClass);\n\n      status.set(\"FETCHED\");\n    }\n  }\n\n  async function update() {\n    status.set(\"UPDATING\");\n\n    const {\n      name,\n      subject,\n      level,\n      times,\n      gender,\n      description_md,\n      price_per_hour,\n      registration_fee,\n      registration_fee_offer,\n      hours_per_lesson,\n      invoice_cycle,\n      teacher_id,\n      state,\n      notes,\n    } = clss;\n\n    const { data, errors } = await client.request(queries.UPDATE, {\n      id: clss.id,\n      classInput: {\n        name,\n        subject,\n        level,\n        times,\n        gender,\n        description_md,\n        price_per_hour,\n        registration_fee,\n        registration_fee_offer,\n        hours_per_lesson,\n        invoice_cycle,\n        teacher_id,\n        state,\n        notes,\n      },\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      data.updateClass.teacher_id = data.updateClass.teacher.id;\n      set(data.updateClass);\n\n      status.set(\"UPDATED\");\n      notifications.display({ message: \"Klasse wurde gespeichert\" });\n    }\n  }\n\n  async function del() {\n    status.set(\"DELETING\");\n\n    const { errors } = await client.request(queries.DELETE, { id: clss.id });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      status.set(\"DELETED\");\n    }\n  }\n\n  async function createFirstInvoices() {\n    status.set(\"CREATING_FIRST_INVOICES\");\n\n    const { data, errors } = await client.request(\n      queries.CREATE_FIRST_INVOICES,\n      {\n        id: clss.id,\n      }\n    );\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      data.createFirstInvoices.teacher_id = data.createFirstInvoices.teacher.id;\n      set(data.createFirstInvoices);\n\n      status.set(\"FIRST_INVOICES_CREATED\");\n      notifications.display({ message: \"Rechnungen werden verschickt...\" });\n    }\n  }\n\n  async function createLesson(lessonInput, sessionInputs) {\n    status.set(\"CREATING_LESSON\");\n\n    const { data, errors } = await client.request(queries.CREATE_LESSON, {\n      lessonInput,\n      sessionInputs,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      clss.lessons = [data.createLesson, ...clss.lessons];\n      set(clss);\n\n      status.set(\"LESSON_CREATED\");\n      notifications.display({ message: \"Unterricht wurde erstellt\" });\n    }\n  }\n\n  async function updateLesson(id, lessonInput) {\n    status.set(\"UPDATING_LESSON\");\n\n    const { data, errors } = await client.request(queries.UPDATE_LESSON, {\n      id,\n      lessonInput,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n    } else {\n      const index = clss.lessons.findIndex((lesson) => lesson.id === id);\n      clss.lessons[index] = data.updateLesson;\n      set(clss);\n\n      status.set(\"UPDATED_LESSON\");\n    }\n  }\n\n  async function createEnrollment(student_id, class_id) {\n    status.set(\"CREATING_ENROLLMENT\");\n\n    const { data, errors } = await client.request(queries.CREATE_ENROLLMENT, {\n      student_id,\n      class_id,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      clss.enrollments.push(data.createEnrollment);\n      set(clss);\n\n      status.set(\"CREATED_ENROLLMENT\");\n      notifications.display({\n        message: \"Schüler wurde der Klasse hingezufügt.\",\n      });\n    }\n  }\n\n  async function updateEnrollment(id, { custom_price_per_hour }) {\n    status.set(\"UPDATING_ENROLLMENT\");\n\n    const { data, errors } = await client.request(queries.UPDATE_ENROLLMENT, {\n      id,\n      custom_price_per_hour,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      let old = clss.enrollments.find((e) => e.id === id);\n      old = data.updateEnrollment;\n      set(clss);\n\n      status.set(\"UPDATED_ENROLLMENT\");\n      notifications.display({\n        message: \"Stundenpreis wurde aktualisiert.\",\n      });\n    }\n  }\n\n  async function delEnrollment(id) {\n    status.set(\"DELETING_ENROLLMENT\");\n\n    const { data, errors } = await client.request(queries.DEL_ENROLLMENT, {\n      id,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      clss.enrollments = clss.enrollments.filter((e) => e.id !== id);\n      set(clss);\n\n      status.set(\"DELETED_ENROLLMENT\");\n      notifications.display({\n        message: \"Schüler wurde aus der Klasse entfernt.\",\n      });\n    }\n  }\n\n  async function requestClassChange(student_id, currentClassId, newClassId) {\n    status.set(\"REQUESTING_CLASS_CHANGE\");\n\n    const { data, errors } = await client.request(\n      queries.REQUEST_CLASS_CHANGE,\n      {\n        student_id,\n        currentClassId,\n        newClassId,\n      }\n    );\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      status.set(\"REQUESTED_CLASS_CHANGE\");\n\n      return data.requestClassChange;\n    }\n  }\n\n  return {\n    set,\n    del,\n    fetch,\n    create,\n    update,\n    subscribe,\n    createLesson,\n    updateLesson,\n    delEnrollment,\n    createEnrollment,\n    updateEnrollment,\n    requestClassChange,\n    createFirstInvoices,\n  };\n}\n\nconst clss = createClassStore();\n\nexport { clss, status };\n"],"names":["fragments","gql","queries","GET_BY_ID","CREATE","UPDATE","CREATE_FIRST_INVOICES","DELETE","CREATE_LESSON","UPDATE_LESSON","CREATE_ENROLLMENT","UPDATE_ENROLLMENT","DEL_ENROLLMENT","REQUEST_CLASS_CHANGE","status","createStatusStore","clss","subs","set","value","fn","del","async","errors","client","request","id","notifications","display","message","level","fetch","data","getClass","teacher_id","teacher","create","classInput","createClass","update","name","subject","times","gender","description_md","price_per_hour","registration_fee","registration_fee_offer","hours_per_lesson","invoice_cycle","state","notes","updateClass","subscribe","handler","push","filter","createLesson","lessonInput","sessionInputs","lessons","updateLesson","index","findIndex","lesson","delEnrollment","enrollments","e","createEnrollment","student_id","class_id","updateEnrollment","custom_price_per_hour","find","requestClassChange","currentClassId","newClassId","createFirstInvoices","createClassStore"],"mappings":"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"}