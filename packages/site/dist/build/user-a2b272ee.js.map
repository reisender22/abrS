{"version":3,"file":"user-a2b272ee.js","sources":["../../src/stores/user.js"],"sourcesContent":["import { client, gql } from \"../utils/client\";\nimport { notifications } from \"./quickNotifications\";\nimport createStatusStore from \"../utils/createStatusStore\";\n\nconst fragments = {\n  ALL_FIELDS: gql`\n    id\n    email\n    gender\n    first_name\n    last_name\n    address_line_1\n    address_line_2\n    postal_code\n    locality\n    administrative_area\n    country\n    phone_number\n    role\n    is_email_verified\n    is_registration_fee_paid\n    is_locked\n    comments {\n      id\n      body_md\n      author {\n        id\n        first_name\n        last_name\n      }\n      updated_at\n      created_at\n    }\n    last_login_at\n    updated_at\n    created_at\n    invoices {\n      id\n      amount\n      state\n      created_at\n    }`,\n\n  ALL_COMMENT_FIELDS: gql`\n    id\n    body_md\n    author {\n      id\n      first_name\n      last_name\n    }\n    updated_at\n    created_at`,\n};\n\nconst queries = {\n  GET_BY_ID: gql`\n    query GetUserById($id: ID!) {\n      getUser(id: $id) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n};\n\nconst mutations = {\n  CREATE: gql`\n    mutation CreateNewUser($userInput: UserInput!, $sendEmail: Boolean) {\n      createUser(userInput: $userInput, sendEmail: $sendEmail) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n\n  UPDATE: gql`\n    mutation UpdateUser($id: ID!, $userInput: UserInput!) {\n      updateUser(id: $id, userInput: $userInput) {\n        ${fragments.ALL_FIELDS}\n      }\n    }`,\n\n  UPDATE_PASSWORD: gql`\n    mutation UpdateUserPassword($id: ID!, $password: String!) {\n      updateUserPassword(id: $id, password: $password)\n    }\n  `,\n\n  DEL: gql`\n    mutation DeleteUser($id: ID!) {\n      deleteUser(id: $id)\n    }\n  `,\n\n  CREATE_COMMENT: gql`\n    mutation CreateNewUserComment($userCommentInput: UserCommentInput!) {\n      createUserComment(userCommentInput: $userCommentInput) {\n        ${fragments.ALL_COMMENT_FIELDS}\n      }\n    }`,\n\n  UPDATE_COMMENT: gql`\n    mutation UpdateUserComment($id: ID!, body_md) {\n      updateUserComment(id: $id, body_md: $body_md) {\n        ${fragments.ALL_COMMENT_FIELDS}\n      }\n    }`,\n\n  DEL_COMMENT: gql`\n    mutation DeleteUserComment($id: ID!) {\n     \n    }`,\n};\n\nconst status = createStatusStore();\n\nfunction createUserStore() {\n  let user;\n  let subs = [];\n\n  function subscribe(handler) {\n    subs.push(handler);\n    handler(user);\n\n    return function unsubscribe() {\n      subs = subs.filter((fn) => fn !== handler);\n    };\n  }\n\n  function set(value) {\n    user = value;\n    for (const fn of subs) fn(user);\n  }\n\n  async function create(userInput, sendEmail) {\n    status.set(\"CREATING\");\n\n    const { data, errors } = await client.request(mutations.CREATE, {\n      userInput,\n      sendEmail,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      set(data.createUser);\n      status.set(\"CREATED\");\n      notifications.display({ message: \"Benutzer wurde erstellt\" });\n    }\n  }\n\n  async function fetch(id) {\n    status.set(\"FETCHING\");\n\n    const { data, errors } = await client.request(queries.GET_BY_ID, { id });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      set(data.getUser);\n      status.set(\"FETCHED\");\n    }\n  }\n\n  async function update() {\n    status.set(\"UPDATING\");\n\n    const {\n      id,\n      last_login_at,\n      created_at,\n      updated_at,\n      invoices,\n      comments,\n      ...userInput\n    } = user;\n\n    const { data, errors } = await client.request(mutations.UPDATE, {\n      id,\n      userInput,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      set(data.updateUser);\n      status.set(\"UPDATED\");\n      notifications.display({ message: \"Benutzer wurde gespeichert\" });\n    }\n  }\n\n  async function updatePassword(password, passwordRepeat) {\n    if (password !== passwordRepeat) {\n      notifications.display({\n        message: \"Passwörter stimmen nicht überein\",\n        level: \"error\",\n      });\n    }\n\n    status.set(\"UPDATING_PASSWORD\");\n\n    const { data, errors } = await client.request(mutations.UPDATE_PASSWORD, {\n      id: user.id,\n      password,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      status.set(\"UPDATED_PASSWORD\");\n      notifications.display({ message: \"Passwort wurde gespeichert\" });\n    }\n  }\n\n  async function del(id) {\n    status.set(\"DELETING\");\n\n    const { errors } = await client.request(mutations.DEL, { id });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      status.set(\"DELETED\");\n      notifications.display({ message: \"Benutzer wurde gelöscht\" });\n    }\n  }\n\n  async function createComment({ body_md, author_id }) {\n    status.set(\"CREATING_COMMENT\");\n\n    const { data, errors } = await client.request(mutations.CREATE_COMMENT, {\n      userCommentInput: { body_md, author_id, user_id: user.id },\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      user.comments = [data.createUserComment, ...user.comments];\n      set(user);\n      status.set(\"COMMENT_CREATED\");\n      notifications.display({ message: \"Notiz wurde erstellt\" });\n    }\n  }\n\n  async function updateComment(id, body_md) {\n    status.set(\"UPDATING_COMMENT\");\n\n    const { data, errors } = await client.request(mutations.UPDATE_COMMENT, {\n      id,\n      body_md,\n    });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      user.comments = [data.updateUserComment, ...user.comments];\n      set(user);\n      status.set(\"UPDATED_COMMENT\");\n      notifications.display({ message: \"Änderungen wurden gespeichert\" });\n    }\n  }\n\n  async function delComment(id) {\n    status.set(\"DELETING_COMMENT\");\n\n    const { errors } = await client.request(mutations.DEL_COMMENT, { id });\n\n    if (errors) {\n      status.set(\"ERROR\");\n\n      notifications.display({\n        message: \"Fehler: \" + errors[0].message,\n        level: \"error\",\n      });\n    } else {\n      user.comments = user.comments.filter((comment) => comment.id !== id);\n      set(user);\n      status.set(\"DELETED_COMMENT\");\n      notifications.display({ message: \"Notiz wurde gelöscht\" });\n    }\n  }\n\n  return {\n    set,\n    del,\n    fetch,\n    create,\n    update,\n    subscribe,\n    delComment,\n    createComment,\n    updateComment,\n    updatePassword,\n  };\n}\n\nconst user = createUserStore();\n\nexport { user, status };\n"],"names":["fragments","gql","queries","GET_BY_ID","mutations","CREATE","UPDATE","UPDATE_PASSWORD","DEL","CREATE_COMMENT","UPDATE_COMMENT","DEL_COMMENT","status","createStatusStore","user","subs","set","value","fn","del","async","id","errors","client","request","notifications","display","message","level","fetch","data","getUser","create","userInput","sendEmail","createUser","update","last_login_at","created_at","updated_at","invoices","comments","updateUser","subscribe","handler","push","filter","delComment","comment","createComment","body_md","author_id","userCommentInput","user_id","createUserComment","updateComment","updateUserComment","updatePassword","password","passwordRepeat","createUserStore"],"mappings":"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"}